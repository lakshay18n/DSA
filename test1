#include<stdio.h>
#include<stdlib.h>

typedef struct node {
    struct node* pre;
    int data;
    struct node* next;
} node;

node* createNode(int data) {
    node* newNode = (node*)malloc(sizeof(node));
    if (!newNode) {
        printf("Memory allocation failed\n");
        return NULL;
    } else {
        newNode->pre = NULL;
        newNode->data = data;
        newNode->next = NULL;
        return newNode;
    }
}

void circularLL(node** head) {
    if (*head == NULL) return;
    node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = *head;
    (*head)->pre = temp;  // Set the previous pointer for the head to create a circular doubly linked list
}

void insertB(node** head, int data) {
    node* newnode = createNode(data);
    if (newnode == NULL) return;
    newnode->next = *head;
    if (*head != NULL) {
        (*head)->pre = newnode;
    }
    *head = newnode;
}

void insertE(node** head, int data) {
    node* newnode = createNode(data);
    if (newnode == NULL) return;

    if (*head == NULL) {
        *head = newnode;
    } else {
        node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->pre = temp;
    }
}

void insertSp(node** head, int data, int pos) {
    node* newnode = createNode(data);
    if (newnode == NULL) return;

    if (pos == 0) {
        newnode->next = *head;
        if (*head != NULL) {
            (*head)->pre = newnode;
        }
        *head = newnode;
    } else {
        node* temp = *head;
        for (int i = 0; i < pos - 1; i++) {
            if (temp == NULL) {
                printf("Invalid position\n");
                free(newnode);
                return;
            }
            temp = temp->next;
        }
        if (temp == NULL) {
            printf("Invalid position\n");
            free(newnode);
            return;
        }
        newnode->next = temp->next;
        if (temp->next != NULL) {
            temp->next->pre = newnode;
        }
        temp->next = newnode;
        newnode->pre = temp;
    }
}

void deleteB(node** head) {
    if (*head == NULL) {
        printf("The list is empty ðŸ˜…\n");
        return;
    } else {
        node* del = *head;
        *head = (*head)->next;
        if (*head != NULL) {
            (*head)->pre = NULL;
        }
        free(del);
    }
}

void deleteSP(node** head, int pos) {
    if (*head == NULL) {
        printf("The list is empty ðŸ˜…\n");
        return;
    }
    if (pos == 0) {
        deleteB(head);
    } else {
        node* del = *head;
        node* temp = NULL;
        for (int i = 0; i < pos; i++) {
            temp = del;
            del = del->next;
            if (del == NULL) {
                printf("Invalid position!\n");
                return;
            }
        }
        temp->next = del->next;
        if (del->next != NULL) {
            del->next->pre = temp;
        }
        free(del);
    }
}

void print(node* head) {
    node* x = head;
    while (x != NULL) {
        printf("%d\t", x->data);
        x = x->next;
    }
    printf("\n");
}

int main() {
    node* head = NULL;
    insertB(&head, 10);
    insertB(&head, 20);
    insertE(&head, 30);
    insertE(&head, 40);
    insertSp(&head, 25, 3);
    print(head);
    deleteB(&head);
    print(head);
    deleteSP(&head, 4);
    print(head);
    return 0;
}
